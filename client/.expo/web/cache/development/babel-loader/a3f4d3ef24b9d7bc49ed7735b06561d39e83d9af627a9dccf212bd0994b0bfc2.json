{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport FlexInput from \"./FlexInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DatePicker = function DatePicker(_ref) {\n  var label = _ref.label,\n    date = _ref.date,\n    onChange = _ref.onChange;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var onPickerChange = function onPickerChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    onChange(currentDate);\n    if (Platform.OS === 'ios') {\n      setShow(false);\n    }\n  };\n  var togglePicker = function togglePicker() {\n    setShow(!show);\n  };\n  return _jsxs(View, {\n    children: [show && _jsxs(View, {\n      children: [_jsx(DateTimePicker, {\n        testID: \"dateTimePicker\",\n        value: date,\n        mode: \"date\",\n        is24Hour: true,\n        display: \"default\",\n        onChange: onPickerChange\n      }), _jsx(Button, {\n        title: \"Done\",\n        onPress: togglePicker\n      })]\n    }), !show && _jsx(TouchableOpacity, {\n      onPress: togglePicker,\n      children: _jsx(View, {\n        children: _jsx(Text, {\n          children: label\n        })\n      })\n    })]\n  });\n};\nexport default DatePicker;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","Platform","Button","DateTimePicker","FlexInput","jsx","_jsx","jsxs","_jsxs","DatePicker","_ref","label","date","onChange","_useState","_useState2","_slicedToArray","show","setShow","onPickerChange","event","selectedDate","currentDate","OS","togglePicker","children","testID","value","mode","is24Hour","display","title","onPress"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/DatePicker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, Platform, Button } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport FlexInput from './FlexInput';\r\n\r\nconst DatePicker = ({ label, date, onChange }) => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  const onPickerChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    onChange(currentDate);\r\n\r\n    // Close the picker on iOS after selecting a date\r\n    if (Platform.OS === 'ios') {\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  const togglePicker = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {show && (\r\n        <View>\r\n          <DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={date}\r\n            mode=\"date\"\r\n            is24Hour={true}\r\n            display=\"default\"\r\n            onChange={onPickerChange}\r\n          />\r\n          <Button title=\"Done\" onPress={togglePicker} />\r\n        </View>\r\n      )}\r\n\r\n      {!show && (\r\n        <TouchableOpacity onPress={togglePicker}>\r\n          <View>\r\n            <Text>{label}</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,MAAA;AAExC,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,SAAS;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpC,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACzC,IAAAC,SAAA,GAAwBjB,QAAQ,CAAC,IAAI,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpB,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEC,YAAY,EAAK;IAC9C,IAAMC,WAAW,GAAGD,YAAY,IAAIT,IAAI;IACxCC,QAAQ,CAACS,WAAW,CAAC;IAGrB,IAAIrB,QAAQ,CAACsB,EAAE,KAAK,KAAK,EAAE;MACzBL,OAAO,CAAC,KAAK,CAAC;IAChB;EACF,CAAC;EAED,IAAMM,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzBN,OAAO,CAAC,CAACD,IAAI,CAAC;EAChB,CAAC;EAED,OACET,KAAA,CAACV,IAAI;IAAA2B,QAAA,GACFR,IAAI,IACHT,KAAA,CAACV,IAAI;MAAA2B,QAAA,GACHnB,IAAA,CAACH,cAAc;QACbuB,MAAM,EAAC,gBAAgB;QACvBC,KAAK,EAAEf,IAAK;QACZgB,IAAI,EAAC,MAAM;QACXC,QAAQ,EAAE,IAAK;QACfC,OAAO,EAAC,SAAS;QACjBjB,QAAQ,EAAEM;MAAe,CAC1B,CAAC,EACFb,IAAA,CAACJ,MAAM;QAAC6B,KAAK,EAAC,MAAM;QAACC,OAAO,EAAER;MAAa,CAAE,CAAC;IAAA,CAC1C,CACP,EAEA,CAACP,IAAI,IACJX,IAAA,CAACN,gBAAgB;MAACgC,OAAO,EAAER,YAAa;MAAAC,QAAA,EACtCnB,IAAA,CAACR,IAAI;QAAA2B,QAAA,EACHnB,IAAA,CAACP,IAAI;UAAA0B,QAAA,EAAEd;QAAK,CAAO;MAAC,CAChB;IAAC,CACS,CACnB;EAAA,CACG,CAAC;AAEX,CAAC;AAED,eAAeF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}