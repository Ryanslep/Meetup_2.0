{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar apiBaseUrl = 'http://localhost:3000';\nvar messageApi = {\n  sendMessage: function () {\n    var _sendMessage = _asyncToGenerator(function* (sender, receiver, text) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/api/messages/send`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            sender: sender,\n            receiver: receiver,\n            text: text\n          })\n        });\n        var data = yield response.json();\n        if (response.ok) {\n          return data;\n        } else {\n          throw new Error(data.error || 'Error sending message');\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n        throw new Error('Error sending message');\n      }\n    });\n    function sendMessage(_x, _x2, _x3) {\n      return _sendMessage.apply(this, arguments);\n    }\n    return sendMessage;\n  }(),\n  getMessageHistory: function () {\n    var _getMessageHistory = _asyncToGenerator(function* (userId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/api/messages/history/${userId}`);\n        var data = yield response.json();\n        if (response.ok) {\n          return data;\n        } else {\n          throw new Error(data.error || 'Error fetching message history');\n        }\n      } catch (error) {\n        console.error('Error fetching message history:', error);\n        throw new Error('Error fetching message history');\n      }\n    });\n    function getMessageHistory(_x4) {\n      return _getMessageHistory.apply(this, arguments);\n    }\n    return getMessageHistory;\n  }()\n};\nexport default messageApi;","map":{"version":3,"names":["apiBaseUrl","messageApi","sendMessage","_sendMessage","_asyncToGenerator","sender","receiver","text","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","console","_x","_x2","_x3","apply","arguments","getMessageHistory","_getMessageHistory","userId","_x4"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/api/messageApi.js"],"sourcesContent":["const apiBaseUrl = 'http://localhost:3000';\r\n\r\nconst messageApi = {\r\n  sendMessage: async (sender, receiver, text) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/api/messages/send`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ sender, receiver, text }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        throw new Error(data.error || 'Error sending message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      throw new Error('Error sending message');\r\n    }\r\n  },\r\n\r\n  getMessageHistory: async (userId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/api/messages/history/${userId}`);\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        throw new Error(data.error || 'Error fetching message history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching message history:', error);\r\n      throw new Error('Error fetching message history');\r\n    }\r\n  },\r\n\r\n  // You can add more functions for handling media, location, etc. if needed.\r\n};\r\n\r\nexport default messageApi;\r\n"],"mappings":";AAAA,IAAMA,UAAU,GAAG,uBAAuB;AAE1C,IAAMC,UAAU,GAAG;EACjBC,WAAW;IAAA,IAAAC,YAAA,GAAAC,iBAAA,CAAE,WAAOC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAK;MAC7C,IAAI;QACF,IAAMC,QAAQ,SAASC,KAAK,CAAE,GAAET,UAAW,oBAAmB,EAAE;UAC9DU,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAET,MAAM,EAANA,MAAM;YAAEC,QAAQ,EAARA,QAAQ;YAAEC,IAAI,EAAJA;UAAK,CAAC;QACjD,CAAC,CAAC;QAEF,IAAMQ,IAAI,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;UACf,OAAOF,IAAI;QACb,CAAC,MAAM;UACL,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uBAAuB,CAAC;QACxD;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,MAAM,IAAID,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACF,CAAC;IAAA,SAAAhB,YAAAmB,EAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAApB,YAAA,CAAAqB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAvB,WAAA;EAAA;EAEDwB,iBAAiB;IAAA,IAAAC,kBAAA,GAAAvB,iBAAA,CAAE,WAAOwB,MAAM,EAAK;MACnC,IAAI;QACF,IAAMpB,QAAQ,SAASC,KAAK,CAAE,GAAET,UAAW,yBAAwB4B,MAAO,EAAC,CAAC;QAE5E,IAAMb,IAAI,SAASP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;UACf,OAAOF,IAAI;QACb,CAAC,MAAM;UACL,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,gCAAgC,CAAC;QACjE;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,MAAM,IAAID,KAAK,CAAC,gCAAgC,CAAC;MACnD;IACF,CAAC;IAAA,SAAAQ,kBAAAG,GAAA;MAAA,OAAAF,kBAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAC,iBAAA;EAAA;AAGH,CAAC;AAED,eAAezB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}