{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport FlexInput from \"./FlexInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DatePicker = function DatePicker(_ref) {\n  var label = _ref.label,\n    date = _ref.date,\n    onChange = _ref.onChange,\n    setDate = _ref.setDate;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var onPickerChange = function onPickerChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    onChange(currentDate);\n    if (Platform.OS === 'ios') {\n      setShow(false);\n    }\n  };\n  var togglePicker = function togglePicker() {\n    setShow(!show);\n  };\n  return _jsx(View, {\n    children: show && _jsx(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      value: date,\n      mode: \"date\",\n      is24Hour: true,\n      display: Platform.OS === 'web' ? 'calendar' : 'default',\n      onChange: onPickerChange\n    })\n  });\n};\nexport default DatePicker;","map":{"version":3,"names":["React","useState","View","Platform","DateTimePicker","FlexInput","jsx","_jsx","DatePicker","_ref","label","date","onChange","setDate","_useState","_useState2","_slicedToArray","show","setShow","onPickerChange","event","selectedDate","currentDate","OS","togglePicker","children","testID","value","mode","is24Hour","display"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/DatePicker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Platform } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport FlexInput from './FlexInput';\r\n\r\nconst DatePicker = ({ label, date, onChange, setDate }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const onPickerChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    onChange(currentDate);\r\n\r\n    // Close the picker on iOS after selecting a date\r\n    if (Platform.OS === 'ios') {\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  const togglePicker = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {show && (\r\n        <DateTimePicker\r\n          testID=\"dateTimePicker\"\r\n          value={date}\r\n          mode=\"date\"\r\n          is24Hour={true}\r\n          display={Platform.OS === 'web' ? 'calendar' : 'default'} // Use 'calendar' for web\r\n          onChange={onPickerChange}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAExC,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,SAAS;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAEpC,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAA2C;EAAA,IAArCC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;IAAEC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;EAClD,IAAAC,SAAA,GAAwBb,QAAQ,CAAC,KAAK,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhCG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpB,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEC,YAAY,EAAK;IAC9C,IAAMC,WAAW,GAAGD,YAAY,IAAIV,IAAI;IACxCC,QAAQ,CAACU,WAAW,CAAC;IAGrB,IAAInB,QAAQ,CAACoB,EAAE,KAAK,KAAK,EAAE;MACzBL,OAAO,CAAC,KAAK,CAAC;IAChB;EACF,CAAC;EAED,IAAMM,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzBN,OAAO,CAAC,CAACD,IAAI,CAAC;EAChB,CAAC;EAED,OACEV,IAAA,CAACL,IAAI;IAAAuB,QAAA,EACFR,IAAI,IACHV,IAAA,CAACH,cAAc;MACbsB,MAAM,EAAC,gBAAgB;MACvBC,KAAK,EAAEhB,IAAK;MACZiB,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAE,IAAK;MACfC,OAAO,EAAE3B,QAAQ,CAACoB,EAAE,KAAK,KAAK,GAAG,UAAU,GAAG,SAAU;MACxDX,QAAQ,EAAEO;IAAe,CAC1B;EACF,CACG,CAAC;AAEX,CAAC;AAED,eAAeX,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}