{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport UserWithOptions from \"./UserWithOptions\";\nimport CustomAlert from \"./CustomAlert\";\nimport userApi from \"../api/userApi\";\nimport { useAppContext } from \"./AppContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RSVPList = function RSVPList(_ref) {\n  var rsvps = _ref.rsvps;\n  var _useAppContext = useAppContext(),\n    getCurrentUser = _useAppContext.getCurrentUser;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    alertData = _useState2[0],\n    setAlertData = _useState2[1];\n  var showAlert = function showAlert(type, message) {\n    setAlertData({\n      type: type,\n      message: message\n    });\n  };\n  var _onPressBlock = function () {\n    var _ref2 = _asyncToGenerator(function* (blockedUser) {\n      var currentUser = getCurrentUser();\n      var userId = currentUser._id;\n    });\n    return function onPressBlock(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      style: styles.headerText,\n      children: \"RSVPs:\"\n    }), rsvps ? _jsx(FlatList, {\n      data: rsvps,\n      keyExtractor: function keyExtractor(item, index) {\n        return item._id + index.toString();\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(UserWithOptions, {\n          user: item,\n          onPressMessage: function onPressMessage() {\n            return alert('Message RSVP');\n          },\n          onPressBlock: function onPressBlock() {\n            return _onPressBlock(item);\n          },\n          onPressAddFriend: function onPressAddFriend() {\n            return alert('Add Friend RSVP');\n          }\n        });\n      }\n    }) : _jsx(Text, {\n      children: \"Loading RSVPs...\"\n    }), alertData && _jsx(CustomAlert, {\n      message: alertData.message,\n      success: alertData.type === 'success',\n      onClose: function onClose() {\n        return setAlertData(null);\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  headerText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 10\n  }\n});\nexport default RSVPList;","map":{"version":3,"names":["React","useState","View","Text","FlatList","StyleSheet","UserWithOptions","CustomAlert","userApi","useAppContext","jsx","_jsx","jsxs","_jsxs","RSVPList","_ref","rsvps","_useAppContext","getCurrentUser","_useState","_useState2","_slicedToArray","alertData","setAlertData","showAlert","type","message","onPressBlock","_ref2","_asyncToGenerator","blockedUser","currentUser","userId","_id","_x","apply","arguments","children","style","styles","headerText","data","keyExtractor","item","index","toString","renderItem","_ref3","user","onPressMessage","alert","onPressAddFriend","success","onClose","create","fontSize","fontWeight","marginTop","marginBottom"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/RSVPList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, FlatList, StyleSheet } from 'react-native';\r\nimport UserWithOptions from './UserWithOptions';\r\nimport CustomAlert from './CustomAlert'; // Import your CustomAlert component\r\nimport userApi from '../api/userApi';\r\nimport { useAppContext } from './AppContext';\r\n\r\nconst RSVPList = ({ rsvps }) => {\r\n    const { getCurrentUser } = useAppContext();\r\n    const [alertData, setAlertData] = useState(null);\r\n\r\n    const showAlert = (type, message) => {\r\n        setAlertData({ type, message });\r\n    };\r\n\r\n    const onPressBlock = async (blockedUser) => {\r\n        const currentUser = getCurrentUser();\r\n        const userId = currentUser._id; // Assuming _id is the property holding userId\r\n\r\n        // Now you have the userId, and you can use it in your blockUser logic\r\n        // const blocking = await userApi.blockUser(userId);\r\n\r\n        // showAlert('success', `Blocked user: ${blockedUser.username}, currentUser: ${currentUser.username}`);\r\n    };\r\n\r\n    return (\r\n        <View>\r\n            <Text style={styles.headerText}>RSVPs:</Text>\r\n            {rsvps ? (\r\n                <FlatList\r\n                    data={rsvps}\r\n                    keyExtractor={(item, index) => item._id + index.toString()}\r\n                    renderItem={({ item }) => (\r\n                        <UserWithOptions\r\n                            user={item}\r\n                            onPressMessage={() => alert('Message RSVP')}\r\n                            onPressBlock={() => onPressBlock(item)}\r\n                            onPressAddFriend={() => alert('Add Friend RSVP')}\r\n                        />\r\n                    )}\r\n                />\r\n            ) : (\r\n                <Text>Loading RSVPs...</Text>\r\n            )}\r\n\r\n            {/* Display CustomAlert if there is an alertData */}\r\n            {alertData && (\r\n                <CustomAlert\r\n                    message={alertData.message}\r\n                    success={alertData.type === 'success'}\r\n                    onClose={() => setAlertData(null)} // Handle the onClose event\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    headerText: {\r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        marginTop: 20,\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\nexport default RSVPList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}