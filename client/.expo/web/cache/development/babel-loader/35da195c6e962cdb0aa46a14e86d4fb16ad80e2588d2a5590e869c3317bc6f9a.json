{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar TimePicker = function TimePicker(_ref) {\n  var label = _ref.label,\n    time = _ref.time,\n    onChange = _ref.onChange;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var onPickerChange = function onPickerChange(event, selectedTime) {\n    var currentTime = selectedTime || time;\n    onChange(currentTime);\n    if (Platform.OS === 'ios') {\n      setShow(false);\n    }\n  };\n  return _jsx(View, {\n    children: _jsx(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      value: time,\n      mode: \"time\",\n      is24Hour: true,\n      display: \"default\",\n      onChange: onPickerChange\n    })\n  });\n};\nexport default TimePicker;","map":{"version":3,"names":["React","useState","View","Platform","DateTimePicker","jsx","_jsx","TimePicker","_ref","label","time","onChange","_useState","_useState2","_slicedToArray","show","setShow","onPickerChange","event","selectedTime","currentTime","OS","children","testID","value","mode","is24Hour","display"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/TimePicker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Platform } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\n\r\nconst TimePicker = ({ label, time, onChange }) => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  const onPickerChange = (event, selectedTime) => {\r\n    const currentTime = selectedTime || time;\r\n    onChange(currentTime);\r\n\r\n    // Close the picker on iOS after selecting a time\r\n    if (Platform.OS === 'ios') {\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n          <DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={time}\r\n            mode=\"time\"\r\n            is24Hour={true}\r\n            display=\"default\"\r\n            onChange={onPickerChange}\r\n          />\r\n        </View>\r\n  );\r\n};\r\n\r\nexport default TimePicker;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAExC,OAAOC,cAAc,MAAM,wCAAwC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEpE,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACzC,IAAAC,SAAA,GAAwBX,QAAQ,CAAC,IAAI,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpB,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEC,YAAY,EAAK;IAC9C,IAAMC,WAAW,GAAGD,YAAY,IAAIT,IAAI;IACxCC,QAAQ,CAACS,WAAW,CAAC;IAGrB,IAAIjB,QAAQ,CAACkB,EAAE,KAAK,KAAK,EAAE;MACzBL,OAAO,CAAC,KAAK,CAAC;IAChB;EACF,CAAC;EAED,OACEV,IAAA,CAACJ,IAAI;IAAAoB,QAAA,EACChB,IAAA,CAACF,cAAc;MACbmB,MAAM,EAAC,gBAAgB;MACvBC,KAAK,EAAEd,IAAK;MACZe,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAE,IAAK;MACfC,OAAO,EAAC,SAAS;MACjBhB,QAAQ,EAAEM;IAAe,CAC1B;EAAC,CACE,CAAC;AAEf,CAAC;AAED,eAAeV,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}