{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { apiBaseUrl } from \"../utils/apiUtils\";\nvar messageApi = {\n  sendMessage: function () {\n    var _sendMessage = _asyncToGenerator(function* (_ref) {\n      var sender = _ref.sender,\n        receiver = _ref.receiver,\n        text = _ref.text;\n      try {\n        var response = yield fetch(`${apiBaseUrl}/messages/send`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            sender: sender,\n            receiver: receiver,\n            text: text\n          })\n        });\n        var data = yield response.json();\n        if (response.ok) {\n          return data;\n        } else {\n          throw new Error(data.error || 'Error sending message');\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n        throw new Error('Error sending message');\n      }\n    });\n    function sendMessage(_x) {\n      return _sendMessage.apply(this, arguments);\n    }\n    return sendMessage;\n  }(),\n  getThread: function () {\n    var _getThread = _asyncToGenerator(function* (senderId, receiverId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/messages/${senderId}/${receiverId}`);\n        var data = yield response.json();\n        if (response.ok) {\n          return data;\n        } else {\n          throw new Error(data.error || 'Error fetching thread');\n        }\n      } catch (error) {\n        console.error('Error fetching thread:', error);\n        throw new Error('Error fetching thread');\n      }\n    });\n    function getThread(_x2, _x3) {\n      return _getThread.apply(this, arguments);\n    }\n    return getThread;\n  }(),\n  getHistory: function () {\n    var _getHistory = _asyncToGenerator(function* (userId) {\n      try {\n        var response = yield fetch(`${apiBaseUrl}/messages/history/${userId}`);\n        var data = yield response.json();\n        if (response.ok) {\n          return data;\n        } else {\n          throw new Error(data.error || 'Error fetching message history');\n        }\n      } catch (error) {\n        console.error('Error fetching message history:', error);\n        throw new Error('Error fetching message history');\n      }\n    });\n    function getHistory(_x4) {\n      return _getHistory.apply(this, arguments);\n    }\n    return getHistory;\n  }()\n};\nexport default messageApi;","map":{"version":3,"names":["apiBaseUrl","messageApi","sendMessage","_sendMessage","_asyncToGenerator","_ref","sender","receiver","text","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","console","_x","apply","arguments","getThread","_getThread","senderId","receiverId","_x2","_x3","getHistory","_getHistory","userId","_x4"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/api/messageApi.js"],"sourcesContent":["// api/messageApi.js\r\n\r\nimport { apiBaseUrl } from \"../utils/apiUtils\";\r\n\r\nconst messageApi = {\r\n  sendMessage: async ({ sender, receiver, text }) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/messages/send`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ sender, receiver, text }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        throw new Error(data.error || 'Error sending message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      throw new Error('Error sending message');\r\n    }\r\n  },\r\n\r\n  getThread: async (senderId, receiverId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/messages/${senderId}/${receiverId}`);\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        throw new Error(data.error || 'Error fetching thread');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching thread:', error);\r\n      throw new Error('Error fetching thread');\r\n    }\r\n  },\r\n\r\n  getHistory: async (userId) => {\r\n    try {\r\n      const response = await fetch(`${apiBaseUrl}/messages/history/${userId}`);\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        throw new Error(data.error || 'Error fetching message history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching message history:', error);\r\n      throw new Error('Error fetching message history');\r\n    }\r\n  },\r\n\r\n  // You can add more functions for handling media, location, etc. if needed.\r\n};\r\n\r\nexport default messageApi;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}