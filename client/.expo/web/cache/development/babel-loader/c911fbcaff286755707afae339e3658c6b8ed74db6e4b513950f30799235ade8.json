{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { localDate, localTime } from \"../utils/formatFunctions\";\nimport { useNavigation } from '@react-navigation/native';\nimport eventApi from \"../api/eventApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EventCard = function EventCard(_ref) {\n  var event = _ref.event,\n    userId = _ref.userId;\n  var navigation = useNavigation();\n  var handleViewDetails = function handleViewDetails() {\n    navigation.navigate('Event Details', {\n      event: event\n    });\n  };\n  console.log(event.host);\n  var handleRSVP = function handleRSVP() {\n    eventApi.rsvp(event._id, userId).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.error('Error RSVPing to event:', error);\n    });\n  };\n  return _jsxs(View, {\n    style: styles.card,\n    children: [_jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: event.eventName\n      }), _jsx(Pressable, {\n        onPress: handleViewDetails,\n        children: _jsx(Image, {\n          source: require(\"../assets/viewDetails.png\"),\n          style: styles.icon\n        })\n      }), userId !== event.host && _jsxs(_Fragment, {\n        children: [_jsx(Pressable, {\n          onPress: handleRSVP,\n          children: _jsx(Image, {\n            source: require(\"../assets/rsvp.png\"),\n            style: styles.icon\n          })\n        }), _jsx(Pressable, {\n          onPress: handleDelete,\n          children: _jsx(Image, {\n            source: require(\"../assets/rsvp.png\"),\n            style: styles.icon\n          })\n        })]\n      })]\n    }), _jsx(Text, {\n      children: event.description\n    }), _jsxs(Text, {\n      children: [\"Date: \", localDate(event.date)]\n    }), _jsxs(Text, {\n      children: [\"Start Time: \", localTime(event.startTime)]\n    }), _jsxs(Text, {\n      children: [\"End Time: \", localTime(event.endTime)]\n    }), event.pictures && event.pictures.length > 0 && _jsx(View, {\n      style: styles.imageContainer,\n      children: event.pictures.map(function (picture, index) {\n        return _jsx(Image, {\n          source: {\n            uri: picture\n          },\n          style: styles.image\n        }, index);\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    margin: 8,\n    elevation: 2\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 8\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8\n  },\n  icon: {\n    width: 24,\n    height: 24\n  }\n});\nexport default EventCard;","map":{"version":3,"names":["React","View","Text","StyleSheet","Image","Pressable","Alert","localDate","localTime","useNavigation","eventApi","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","EventCard","_ref","event","userId","navigation","handleViewDetails","navigate","console","log","host","handleRSVP","rsvp","_id","then","response","catch","error","style","styles","card","children","row","title","eventName","onPress","source","require","icon","handleDelete","description","date","startTime","endTime","pictures","length","imageContainer","map","picture","index","uri","image","create","backgroundColor","padding","borderRadius","margin","elevation","fontSize","fontWeight","marginBottom","flexDirection","justifyContent","alignItems","width","height"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/EventCard.js"],"sourcesContent":["import React from 'react';\r\nimport { View, Text, StyleSheet, Image, Pressable, Alert } from 'react-native';\r\nimport { localDate, localTime } from '../utils/formatFunctions';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport eventApi from '../api/eventApi';\r\n\r\nconst EventCard = ({ event, userId }) => {\r\n  const navigation = useNavigation();\r\n  const handleViewDetails = () => {\r\n    // Navigate to the EventDetails screen with the event prop\r\n    navigation.navigate('Event Details', { event });\r\n  };\r\n  console.log(event.host)\r\n  const handleRSVP = () => {\r\n    eventApi.rsvp(event._id, userId)\r\n      .then(response => {\r\n        console.log(response)\r\n      })\r\n      .catch(error => {\r\n        console.error('Error RSVPing to event:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.card}>\r\n      <View style={styles.row}>\r\n        <Text style={styles.title}>{event.eventName}</Text>\r\n        <Pressable onPress={handleViewDetails}>\r\n          <Image source={require('../assets/viewDetails.png')} style={styles.icon} />\r\n        </Pressable>\r\n\r\n        {/* Conditionally render RSVP button and Message Buttons */}\r\n        {userId !== event.host && (\r\n          <>\r\n            <Pressable onPress={handleRSVP}>\r\n              <Image source={require('../assets/rsvp.png')} style={styles.icon} />\r\n            </Pressable>\r\n            <Pressable onPress={handleDelete}>\r\n              <Image source={require('../assets/rsvp.png')} style={styles.icon} />\r\n            </Pressable>\r\n          </>\r\n        )}\r\n      </View>\r\n\r\n      <Text>{event.description}</Text>\r\n      <Text>Date: {localDate(event.date)}</Text>\r\n      <Text>Start Time: {localTime(event.startTime)}</Text>\r\n      <Text>End Time: {localTime(event.endTime)}</Text>\r\n\r\n      {event.pictures && event.pictures.length > 0 && (\r\n        <View style={styles.imageContainer}>\r\n          {event.pictures.map((picture, index) => (\r\n            <Image key={index} source={{ uri: picture }} style={styles.image} />\r\n          ))}\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  card: {\r\n    backgroundColor: 'white',\r\n    padding: 16,\r\n    borderRadius: 8,\r\n    margin: 8,\r\n    elevation: 2,\r\n  },\r\n  title: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    marginBottom: 8,\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 8,\r\n  },\r\n  icon: {\r\n    width: 24,\r\n    height: 24,\r\n  },\r\n  // Add more styles as needed\r\n});\r\n\r\nexport default EventCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}