{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DatePicker = function DatePicker(_ref) {\n  var label = _ref.label,\n    date = _ref.date,\n    onChange = _ref.onChange;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var showPicker = function showPicker() {\n    setShow(true);\n  };\n  var onPickerChange = function onPickerChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    onChange(currentDate);\n    if (Platform.OS === 'android') {\n      setShow(false);\n    }\n  };\n  return _jsxs(View, {\n    children: [_jsx(TouchableOpacity, {\n      onPress: showPicker,\n      children: _jsx(View, {\n        children: _jsx(Text, {\n          children: label\n        })\n      })\n    }), show && _jsx(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      value: date,\n      mode: \"date\",\n      is24Hour: true,\n      display: \"default\",\n      onChange: onPickerChange\n    })]\n  });\n};\nexport default DatePicker;","map":{"version":3,"names":["DatePicker","_ref","label","date","onChange","_useState","useState","_useState2","_slicedToArray","show","setShow","showPicker","onPickerChange","event","selectedDate","currentDate","Platform","OS","_jsxs","View","children","_jsx","TouchableOpacity","onPress","Text","DateTimePicker","testID","value","mode","is24Hour","display"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/DatePicker.js"],"sourcesContent":["const DatePicker = ({ label, date, onChange }) => {\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const showPicker = () => {\r\n      setShow(true);\r\n    };\r\n  \r\n    const onPickerChange = (event, selectedDate) => {\r\n      const currentDate = selectedDate || date;\r\n      setShow(Platform.OS === 'ios'); // Close the picker on iOS\r\n      onChange(currentDate);\r\n  \r\n      // Close the picker on Android\r\n      if (Platform.OS === 'android') {\r\n        setShow(false);\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <View>\r\n        <TouchableOpacity onPress={showPicker}>\r\n          <View>\r\n            <Text>{label}</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n  \r\n        {show && (\r\n          <DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={date}\r\n            mode=\"date\"\r\n            is24Hour={true}\r\n            display=\"default\"\r\n            onChange={onPickerChange}\r\n          />\r\n        )}\r\n      </View>\r\n    );\r\n  };\r\n  \r\n  export default DatePicker;\r\n  "],"mappings":";;;AAAA,IAAMA,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACvC,IAAAC,SAAA,GAAwBC,QAAQ,CAAC,KAAK,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAAhCI,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpB,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBD,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEC,YAAY,EAAK;IAC9C,IAAMC,WAAW,GAAGD,YAAY,IAAIX,IAAI;IACxCO,OAAO,CAACM,QAAQ,CAACC,EAAE,KAAK,KAAK,CAAC;IAC9Bb,QAAQ,CAACW,WAAW,CAAC;IAGrB,IAAIC,QAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;MAC7BP,OAAO,CAAC,KAAK,CAAC;IAChB;EACF,CAAC;EAED,OACEQ,KAAA,CAACC,IAAI;IAAAC,QAAA,GACHC,IAAA,CAACC,gBAAgB;MAACC,OAAO,EAAEZ,UAAW;MAAAS,QAAA,EACpCC,IAAA,CAACF,IAAI;QAAAC,QAAA,EACHC,IAAA,CAACG,IAAI;UAAAJ,QAAA,EAAElB;QAAK,CAAO;MAAC,CAChB;IAAC,CACS,CAAC,EAElBO,IAAI,IACHY,IAAA,CAACI,cAAc;MACbC,MAAM,EAAC,gBAAgB;MACvBC,KAAK,EAAExB,IAAK;MACZyB,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAE,IAAK;MACfC,OAAO,EAAC,SAAS;MACjB1B,QAAQ,EAAEQ;IAAe,CAC1B,CACF;EAAA,CACG,CAAC;AAEX,CAAC;AAED,eAAeZ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}