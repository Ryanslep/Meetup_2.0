{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TimePicker = function TimePicker(_ref) {\n  var label = _ref.label,\n    time = _ref.time,\n    onChange = _ref.onChange;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var onPickerChange = function onPickerChange(event, selectedTime) {\n    setShow(Platform.OS === 'ios');\n    if (selectedTime) {\n      onChange(selectedTime);\n    }\n  };\n  var togglePicker = function togglePicker() {\n    setShow(!show);\n  };\n  return _jsxs(View, {\n    children: [_jsx(TouchableOpacity, {\n      onPress: togglePicker,\n      children: _jsx(Text, {\n        children: label\n      })\n    }), show && _jsx(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      value: time,\n      mode: \"time\",\n      is24Hour: true,\n      display: Platform.OS === 'web' ? 'spinner' : 'clock',\n      onChange: onPickerChange\n    })]\n  });\n};\nexport default TimePicker;","map":{"version":3,"names":["React","useState","View","Platform","TouchableOpacity","Text","DateTimePicker","jsx","_jsx","jsxs","_jsxs","TimePicker","_ref","label","time","onChange","_useState","_useState2","_slicedToArray","show","setShow","onPickerChange","event","selectedTime","OS","togglePicker","children","onPress","testID","value","mode","is24Hour","display"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/DatePicker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Platform, TouchableOpacity, Text } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\n\r\nconst TimePicker = ({ label, time, onChange }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const onPickerChange = (event, selectedTime) => {\r\n    setShow(Platform.OS === 'ios'); // Always close on iOS\r\n\r\n    if (selectedTime) {\r\n      onChange(selectedTime);\r\n    }\r\n  };\r\n\r\n  const togglePicker = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <TouchableOpacity onPress={togglePicker}>\r\n        <Text>{label}</Text>\r\n      </TouchableOpacity>\r\n\r\n      {show && (\r\n        <DateTimePicker\r\n          testID=\"dateTimePicker\"\r\n          value={time}\r\n          mode=\"time\"\r\n          is24Hour={true}\r\n          display={Platform.OS === 'web' ? 'spinner' : 'clock'} // 'spinner' for web\r\n          onChange={onPickerChange}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default TimePicker;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAExC,OAAOC,cAAc,MAAM,wCAAwC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpE,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACzC,IAAAC,SAAA,GAAwBf,QAAQ,CAAC,KAAK,CAAC;IAAAgB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhCG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpB,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEC,YAAY,EAAK;IAC9CH,OAAO,CAACjB,QAAQ,CAACqB,EAAE,KAAK,KAAK,CAAC;IAE9B,IAAID,YAAY,EAAE;MAChBR,QAAQ,CAACQ,YAAY,CAAC;IACxB;EACF,CAAC;EAED,IAAME,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzBL,OAAO,CAAC,CAACD,IAAI,CAAC;EAChB,CAAC;EAED,OACET,KAAA,CAACR,IAAI;IAAAwB,QAAA,GACHlB,IAAA,CAACJ,gBAAgB;MAACuB,OAAO,EAAEF,YAAa;MAAAC,QAAA,EACtClB,IAAA,CAACH,IAAI;QAAAqB,QAAA,EAAEb;MAAK,CAAO;IAAC,CACJ,CAAC,EAElBM,IAAI,IACHX,IAAA,CAACF,cAAc;MACbsB,MAAM,EAAC,gBAAgB;MACvBC,KAAK,EAAEf,IAAK;MACZgB,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAE,IAAK;MACfC,OAAO,EAAE7B,QAAQ,CAACqB,EAAE,KAAK,KAAK,GAAG,SAAS,GAAG,OAAQ;MACrDT,QAAQ,EAAEM;IAAe,CAC1B,CACF;EAAA,CACG,CAAC;AAEX,CAAC;AAED,eAAeV,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}