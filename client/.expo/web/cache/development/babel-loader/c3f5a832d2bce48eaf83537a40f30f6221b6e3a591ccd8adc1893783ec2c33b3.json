{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport FlexInput from \"./FlexInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DatePicker = function DatePicker(_ref) {\n  var label = _ref.label,\n    date = _ref.date,\n    onChange = _ref.onChange;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var showPicker = function showPicker() {\n    setShow(true);\n  };\n  var onPickerChange = function onPickerChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    onChange(currentDate);\n  };\n  return _jsx(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: \"date\",\n    is24Hour: true,\n    display: \"default\",\n    onChange: onPickerChange\n  });\n};\nexport default DatePicker;","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","Platform","DateTimePicker","FlexInput","jsx","_jsx","DatePicker","_ref","label","date","onChange","_useState","_useState2","_slicedToArray","show","setShow","showPicker","onPickerChange","event","selectedDate","currentDate","OS","testID","value","mode","is24Hour","display"],"sources":["C:/Users/dyarb/batcave/Meetup_2.0/client/components/DatePicker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TouchableOpacity, Platform } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport FlexInput from './FlexInput';\r\n\r\nconst DatePicker = ({ label, date, onChange }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const showPicker = () => {\r\n    setShow(true);\r\n  };\r\n\r\n  const onPickerChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    setShow(Platform.OS === 'ios'); // Close the picker on iOS\r\n    onChange(currentDate);\r\n  };\r\n\r\n  return (\r\n        <DateTimePicker\r\n          testID=\"dateTimePicker\"\r\n          value={date}\r\n          mode=\"date\"\r\n          is24Hour={true}\r\n          display=\"default\"\r\n          onChange={onPickerChange}\r\n        />\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,QAAA;AAExC,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,SAAS;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAEpC,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACzC,IAAAC,SAAA,GAAwBd,QAAQ,CAAC,KAAK,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhCG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpB,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBD,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEC,YAAY,EAAK;IAC9C,IAAMC,WAAW,GAAGD,YAAY,IAAIV,IAAI;IACxCM,OAAO,CAACd,QAAQ,CAACoB,EAAE,KAAK,KAAK,CAAC;IAC9BX,QAAQ,CAACU,WAAW,CAAC;EACvB,CAAC;EAED,OACMf,IAAA,CAACH,cAAc;IACboB,MAAM,EAAC,gBAAgB;IACvBC,KAAK,EAAEd,IAAK;IACZe,IAAI,EAAC,MAAM;IACXC,QAAQ,EAAE,IAAK;IACfC,OAAO,EAAC,SAAS;IACjBhB,QAAQ,EAAEO;EAAe,CAC1B,CAAC;AAEV,CAAC;AAED,eAAeX,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}